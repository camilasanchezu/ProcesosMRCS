version: 2.1

# 1. Definimos el Orb (¡Correcto!)
orbs:
  circleci-cli: circleci/circleci-cli@0.1.9

executors:
  python-exec:
    docker:
      - image: cimg/python:3.11

jobs:
  checkout_setup:
    executor: python-exec
    steps:
      - checkout
      - run:
          name: Create virtualenv and install deps
          command: |
            python -m venv .venv
            . .venv/bin/activate
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - persist_to_workspace:
          root: .
          paths:
            - .venv
            - .

  build:
    executor: python-exec
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Compile application
          command: |
            . .venv/bin/activate
            python -m compileall app
      - persist_to_workspace:
          root: .
          paths:
            - app

  test_and_quality:
    docker:
      - image: cimg/python:3.11
    parallelism: 2
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run unit tests
          command: |
            . .venv/bin/activate
            mkdir -p TestResults
            pytest --junitxml=TestResults/pytest-results.xml
      - run:
          name: Run flake8
          command: |
            . .venv/bin/activate
            flake8 app tests --statistics --output-file=TestResults/flake8-report.txt || true
      - store_test_results:
          path: TestResults
      - store_artifacts:
          path: TestResults
          destination: TestResults

  deploy:
    executor: python-exec
    steps:
      - attach_workspace:
          at: .
      
      # --- ¡LA SOLUCIÓN DEFINITIVA ESTÁ AQUÍ! ---
      
      # 1. Instala el CLI nuevo (sobrescribiendo el antiguo)
      - circleci-cli/install
      
      # 2. Configura la autenticación explícitamente.
      #    Le dice al Orb que use la variable llamada 'CIRCLECI_CLI_TOKEN'.
      - circleci-cli/setup:
          token: CIRCLECI_CLI_TOKEN
      
      # --- FIN DE LA SOLUCIÓN ---

      # 3. Usamos los comandos NUEVOS (que ahora SÍ existen)
      - run:
          name: Plan deploy in CircleCI
          command: |
            circleci release create --version="$CIRCLE_BUILD_NUM"
      
      - run:
          name: Deploy application (Simulated)
          command: |
            . .venv/bin/activate
            if [ ! -d /tmp/deploy ]; then mkdir -p /tmp/deploy; fi
            cp -r app /tmp/deploy/app
            echo "Deployed app to /tmp/deploy/app"
      
      - run:
          name: Update deploy to SUCCESS
          command: |
            circleci release finalize --version="$CIRCLE_BUILD_NUM" --status=SUCCESS
          when: on_success
          
      - run:
          name: Update deploy to FAILED
          command: |
            circleci release finalize --version="$CIRCLE_BUILD_NUM" --status=FAILED
          when: on_fail

  notify_email:
    executor: python-exec
    steps:
      - run:
          name: Send notification email
          command: |
            python - \<<'PY'
            import os, smtplib
            from email.message import EmailMessage

            smtp_server = os.getenv('SMTP_SERVER')
            smtp_port = int(os.getenv('SMTP_PORT','587'))
            smtp_user = os.getenv('SMTP_USER')
            smtp_pass = os.getenv('SMTP_PASS')
            recipients = os.getenv('EMAIL_RECIPIENTS','').split(',') if os.getenv('EMAIL_RECIPIENTS') else [os.getenv('DEFAULT_RECIPIENT')]
            subject = f"[CircleCI] {os.getenv('CIRCLE_PROJECT_REPONAME')} #{os.getenv('CIRCLE_BUILD_NUM')} - {os.getenv('CIRCLE_JOB')}"
            body = f"Job: {os.getenv('CIRCLE_JOB')}\nBuild: {os.getenv('CIRCLE_BUILD_NUM')}\nURL: {os.getenv('CIRCLE_BUILD_URL')}\n"
            msg = EmailMessage()
            msg['Subject'] = subject
            msg['From'] = smtp_user
            msg['To'] = ','.join([r for r in recipients if r])
            msg.set_content(body)
            if smtp_server and smtp_user and smtp_pass:
                s = smtplib.SMTP(smtp_server, smtp_port)
                s.starttls()
                s.login(smtp_user, smtp_pass)
                s.send_message(msg)
                s.quit()
                print('Email enviado')
            else:
                print('SMTP no configurado, no se envió correo')
            PY

workflows:
  ci_workflow:
    jobs:
      - checkout_setup:
          filters:
            branches:
              ignore: main
      - build:
          requires:
            - checkout_setup
          filters:
            branches:
              ignore: main
      - test_and_quality:
          requires:
            - build
          filters:
            branches:
              ignore: main
      - notify_email:
          requires:
            - test_and_quality
          filters:
            branches:
              ignore: main

  deploy_workflow:
    jobs:
      - checkout_setup:
          filters:
            branches:
              only: main
      - build:
          requires:
            - checkout_setup
          filters:
            branches:
              only: main
      - test_and_quality:
          requires:
            - build
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - test_and_quality
          filters:
            branches:
              only: main
      - notify_email:
          requires:
            - deploy
          filters:
            branches:
              only: main
